-- @testpoint: openGauss保留关键字from作为触发器名,部分测试点合理报错
--前提条件
--创建源表
drop table if exists test_trigger_src_tbl;
SQL SUCCESS
CREATE TABLE test_trigger_src_tbl(id1 INT, id2 INT, id3 INT);
SQL SUCCESS
--创建触发表
drop table if exists test_trigger_des_tbl;
SQL SUCCESS
CREATE TABLE test_trigger_des_tbl(id1 INT, id2 INT, id3 INT);
SQL SUCCESS
--创建触发器函数
CREATE OR REPLACE FUNCTION tri_insert_func() RETURNS TRIGGER AS
           $$
           DECLARE
           BEGIN
                   INSERT INTO test_trigger_des_tbl VALUES(NEW.id1, NEW.id2, NEW.id3);
                   RETURN NEW;
           END
           $$ LANGUAGE PLPGSQL;
           /
SQL SUCCESS
--不带引号，合理报错
CREATE TRIGGER from
           BEFORE INSERT ON test_trigger_src_tbl
           FOR EACH ROW
           EXECUTE PROCEDURE tri_insert_func();
		   /
?.*ERROR: syntax error at or near "from".*
?.*Position.*
--加双引号，创建成功
CREATE TRIGGER "from"
           BEFORE INSERT ON test_trigger_src_tbl
           FOR EACH ROW
           EXECUTE PROCEDURE tri_insert_func();
		   /
SQL SUCCESS
--清理环境		   
drop TRIGGER "from" on test_trigger_src_tbl cascade;
SQL SUCCESS
--加单引号，合理报错
CREATE TRIGGER 'from'
           BEFORE INSERT ON test_trigger_src_tbl
           FOR EACH ROW
           EXECUTE PROCEDURE tri_insert_func();
		   /
?.*ERROR: syntax error at or near "'from'".*
?.*Position.*
--带反引号，合理报错
CREATE TRIGGER `from`
           BEFORE INSERT ON test_trigger_src_tbl
           FOR EACH ROW
           EXECUTE PROCEDURE tri_insert_func();
		   /
?.*ERROR: syntax error at or near "`".*
?.*Position.*
--清理环境
drop function tri_insert_func;
SQL SUCCESS
drop table if exists test_trigger_src_tbl;
SQL SUCCESS
drop table if exists test_trigger_des_tbl;
SQL SUCCESS