-- @testpoint: opengauss保留关键字verbose作为触发器名 合理报错
--前提条件
--创建源表
drop table if exists test_trigger_src_tbl;
SQL SUCCESS
create table test_trigger_src_tbl(id1 int, id2 int, id3 int);
SQL SUCCESS
--创建触发表
drop table if exists test_trigger_des_tbl;
SQL SUCCESS
create table test_trigger_des_tbl(id1 int, id2 int, id3 int);
SQL SUCCESS
--创建触发器函数
create or replace function tri_insert_func() returns trigger as
$$
declare
begin
       insert into test_trigger_des_tbl values(new.id1, new.id2, new.id3);
       return new;
end
$$ language plpgsql;
/
SQL SUCCESS
--不带引号，合理报错
create trigger verbose
before insert on test_trigger_src_tbl
for each row
execute procedure tri_insert_func();
/
?.*ERROR: syntax error at or near "verbose"
?.*Position: .*
--加双引号，创建成功
create trigger "verbose"
before insert on test_trigger_src_tbl
for each row
execute procedure tri_insert_func();
/
SQL SUCCESS
--清理环境		   
drop trigger "verbose" on test_trigger_src_tbl cascade;
SQL SUCCESS
--加单引号，合理报错
create trigger 'verbose'
before insert on test_trigger_src_tbl
for each row
execute procedure tri_insert_func();
/
?.*ERROR: syntax error at or near "'verbose'"
?.*Position: .*
--带反引号，合理报错
create trigger `verbose`
before insert on test_trigger_src_tbl
for each row
execute procedure tri_insert_func();
/
?.*ERROR: syntax error at or near "`"
?.*Position: .*
drop table if exists test_trigger_src_tbl;
SQL SUCCESS
drop table if exists test_trigger_des_tbl;
SQL SUCCESS
drop function tri_insert_func;
SQL SUCCESS