-- @testpoint: 时间函数timestamp(双参数)功能测试,部分测试步骤合理报错
--step1:创建用于存储函数结果的表;expect:成功
drop table if exists func_test;
SQL SUCCESS
create table func_test(functionName varchar(256),result varchar(256));
SQL SUCCESS
--step2:插入timestamp入参合法的用例执行结果;expect:成功
insert into func_test(functionName, result) values('TIMESTAMP(''2003-12-31'',''12:00:00.9999995'')', TIMESTAMP('2003-12-31','12:00:00.9999995'));
SQL SUCCESS
insert into func_test(functionName, result) values('TIMESTAMP(''2003-12-31 12:00:00'',''32:00:00'')', TIMESTAMP('2003-12-31 12:00:00','32:00:00'));
SQL SUCCESS
insert into func_test(functionName, result) values('TIMESTAMP(''20000229'',''100:00:00.000001'')', TIMESTAMP('20000229','100:00:00.000001'));
SQL SUCCESS
insert into func_test(functionName, result) values('TIMESTAMP(20000229,1000000)', TIMESTAMP(20000229, 1000000));
SQL SUCCESS
insert into func_test(functionName, result) values('TIMESTAMP(20000229,1000000.000001)', TIMESTAMP(20000229, 1000000.000001));
SQL SUCCESS
insert into func_test(functionName, result) values('TIMESTAMP(''2003-12-31 12:00:00'',''-12:00:00.000001'')', TIMESTAMP('2003-12-31 12:00:00','-12:00:00.000001'));
SQL SUCCESS
insert into func_test(functionName, result) values('TIMESTAMP(''2003-12-31 12:00:00.000001'',''12:00:00.999999'')', TIMESTAMP('2003-12-31 12:00:00.000001','12:00:00.999999'));
SQL SUCCESS
insert into func_test(functionName, result) values('TIMESTAMP(20031231120000,-120000)', TIMESTAMP(20031231120000,-120000));
SQL SUCCESS
insert into func_test(functionName, result) values('TIMESTAMP(20031231120000.000002,-120000.000001)', TIMESTAMP(20031231120000.000002,-120000.000001));
SQL SUCCESS
insert into func_test(functionName, result) values('TIMESTAMP(''1000-12-31'',''838:59:59'')', TIMESTAMP('1000-12-31', '838:59:59'));
SQL SUCCESS
insert into func_test(functionName, result) values('TIMESTAMP(''9999-12-31'',''23:59:59.999999'')', TIMESTAMP('9999-12-31', '23:59:59.999999'));
SQL SUCCESS
insert into func_test(functionName, result) values('TIMESTAMP(''0001-01-01'', ''00:00:00'')', TIMESTAMP('0001-01-01', '00:00:00'));
SQL SUCCESS
--step3:插入timestamp涉及时间类型值超出范围的用例执行结果;expect:合理报错
insert into func_test(functionName, result) values('TIMESTAMP(''10000-01-01'',''25:00:00'')', TIMESTAMP('10000-01-01', '25:00:00'));
?.*ERROR: date/time field value out of range
  Where: referenced column: result
insert into func_test(functionName, result) values('TIMESTAMP(''10000-01-01 00:00:00'',''25:00:00'')', TIMESTAMP('10000-01-01 00:00:00', '25:00:00'));
?.*ERROR: date/time field value out of range
  Where: referenced column: result
insert into func_test(functionName, result) values('TIMESTAMP(''1000-01-01 00:00:00'',''839:00:00'')', TIMESTAMP('1000-12-31 00:00:00', '839:00:00'));
?.*ERROR: invalid input syntax "839:00:00"
  Where: referenced column: result
insert into func_test(functionName, result) values('TIMESTAMP(''9999-12-31 00:00:00'',''24:00:00'')', TIMESTAMP('9999-12-31 00:00:00', '24:00:00'));
?.*ERROR: date/time field overflow
  Where: referenced column: result
insert into func_test(functionName, result) values('TIMESTAMP(''0001-01-01 00:00:00'', ''-00:00:00.000001'')', TIMESTAMP('0001-01-01 00:00:00', '-00:00:00.000001'));
?.*ERROR: date/time field overflow
  Where: referenced column: result
--step4:插入入参为特殊类型的timestamp用例执行结果;expect:成功
insert into func_test(functionName, result) values('TIMESTAMP(date''2003-01-01'', date''2000-01-01'')', TIMESTAMP(date'2003-01-01', date'2000-01-01'));
SQL SUCCESS
insert into func_test(functionName, result) values('TIMESTAMP(cast(''2007-12-10 23:59:59'' as datetime), cast(''2007-12-10 22:59:59'' as datetime))', TIMESTAMP(cast('2007-12-10 23:59:59' as datetime), cast('2007-12-10 22:59:59' as datetime)));
SQL SUCCESS
insert into func_test(functionName, result) values('TIMESTAMP(NULL, NULL)', TIMESTAMP(NULL, NULL));
SQL SUCCESS
--step5:插入非法入参时timestamp执行结果;expect:合理报错
insert into func_test(functionName, result) values('TIMESTAMP(''2003-2-29'',''25:00:00'')', TIMESTAMP('2003-2-29', '25:00:00'));
?.*ERROR: date/time field value out of range: "2003-2-29"
  Where: SQL function "timestamp_mysql" during inlining
referenced column: result
insert into func_test(functionName, result) values('TIMESTAMP(''2003-12-31 25:00:00'',''25:00:00'')', TIMESTAMP('2003-12-31 25:00:00', '25:00:00'));
?.*ERROR: date/time field value out of range: "2003-12-31 25:00:00"
  Where: SQL function "timestamp_mysql" during inlining
referenced column: result
insert into func_test(functionName, result) values('TIMESTAMP(''2003-12-31 23:60:00'',''25:00:00'')', TIMESTAMP('2003-12-31 23:60:00', '25:00:00'));
?.*ERROR: date/time field value out of range: "2003-12-31 23:60:00"
  Where: SQL function "timestamp_mysql" during inlining
referenced column: result
insert into func_test(functionName, result) values('TIMESTAMP(''20000321'', ''abcd'')', TIMESTAMP('20000321', 'abcd'));
?.*ERROR: invalid input syntax "abcd"
  Where: referenced column: result
insert into func_test(functionName, result) values('TIMESTAMP(''abcd'', ''010101'')', TIMESTAMP('abcd', '010101'));
?.*ERROR: invalid input syntax for type timestamp: "abcd"
  Where: SQL function "timestamp_mysql" during inlining
referenced column: result
insert into func_test(functionName, result) values('TIMESTAMP(true, false)', TIMESTAMP(true, false));
?.*ERROR: function pg_catalog.timestamp_mysql\(boolean, boolean\) does not exist
  Hint: No function matches the given name and argument types. You might need to add explicit type casts.
?.*
insert into func_test(functionName, result) values('TIMESTAMP(B''1'', B''1'')', TIMESTAMP(B'1', B'1'));
?.*ERROR: function pg_catalog.timestamp_mysql\(bit, bit\) does not exist
  Hint: No function matches the given name and argument types. You might need to add explicit type casts.
?.*
--step6:查看timestamp函数执行结果是否正确;expect:成功
select * from func_test;
+---------------------------------------------------------------------------------------------+----------------------------+
| functionname                                                                                | result                     |
+---------------------------------------------------------------------------------------------+----------------------------+
| TIMESTAMP('2003-12-31','12:00:00.9999995')                                                  | 2003-12-31 12:00:01        |
| TIMESTAMP('2003-12-31 12:00:00','32:00:00')                                                 | 2004-01-01 20:00:00        |
| TIMESTAMP('20000229','100:00:00.000001')                                                    | 2000-03-04 04:00:00.000001 |
| TIMESTAMP(20000229,1000000)                                                                 | 2000-03-04 04:00:00        |
| TIMESTAMP(20000229,1000000.000001)                                                          | 2000-03-04 04:00:00.000001 |
| TIMESTAMP('2003-12-31 12:00:00','-12:00:00.000001')                                         | 2003-12-30 23:59:59.999999 |
| TIMESTAMP('2003-12-31 12:00:00.000001','12:00:00.999999')                                   | 2004-01-01 00:00:01        |
| TIMESTAMP(20031231120000,-120000)                                                           | 2003-12-31 00:00:00        |
| TIMESTAMP(20031231120000.000002,-120000.000001)                                             | 2003-12-31 00:00:00.000001 |
| TIMESTAMP('1000-12-31','838:59:59')                                                         | 1001-02-03 22:59:59        |
| TIMESTAMP('9999-12-31','23:59:59.999999')                                                   | 9999-12-31 23:59:59.999999 |
| TIMESTAMP('0001-01-01', '00:00:00')                                                         | 0001-01-01 00:00:00        |
| TIMESTAMP(date'2003-01-01', date'2000-01-01')                                               | 2003-01-01 00:00:00        |
| TIMESTAMP(cast('2007-12-10 23:59:59' as datetime), cast('2007-12-10 22:59:59' as datetime)) | 2007-12-11 22:59:58        |
| TIMESTAMP(NULL, NULL)                                                                       |                            |
+---------------------------------------------------------------------------------------------+----------------------------+
--step7:清理环境;expect:成功
drop table if exists func_test;
SQL SUCCESS
