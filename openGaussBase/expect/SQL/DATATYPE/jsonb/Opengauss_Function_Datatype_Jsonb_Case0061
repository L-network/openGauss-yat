-- @testpoint: 通用函数：json_populate_record(将object-json里的键值对按照键填充到一行，当入参不合理时，合理报错）
--json_object_keys函数，入参合理
create type keys as(id int,name varchar);
SQL SUCCESS
select * from jsonb_populate_record(null::keys,'{"id":"0001","name":"wangerxiao","id":"0002","name":"xiaoma"}',true);
+----+--------+
| id | name   |
+----+--------+
| 2  | xiaoma |
+----+--------+
select * from json_populate_record(null::keys,'{"id":"0001","name":"wangerxiao"}');
+----+------------+
| id | name       |
+----+------------+
| 1  | wangerxiao |
+----+------------+
select * from json_populate_record((3,null)::keys,'{"idd":"0001","age":"18"}',false);
+----+------+
| id | name |
+----+------+
| 3  |      |
+----+------+
select * from json_populate_record((1,'name')::keys,'{"a":"blurfl","x":43.2}');
+----+------+
| id | name |
+----+------+
| 1  | name |
+----+------+
--json_object_keys函数，入参不合理
select * from json_populate_record(null::key,'{"id":"0001","name":"wangerxiao"}',true);
?.*ERROR: type "key" does not exist.*
?.*
select * from json_populate_record(true::keys,'{"id":"0001","name":"wangerxiao","age":"18"}',false);
?.*ERROR: cannot cast type boolean to key.*
?.*
select * from json_populate_record(3::keys,'{"id":"zxc","age":"18"}',false);
?.*ERROR: cannot cast type integer to key.*
?.*
select * from json_populate_record((1,1,null)::keys,'{"a":"blurfl","x":43.2}');
?.*ERROR: cannot cast type record to key.*
  Detail: Input has too many columns.
?.*
select * from json_populate_record((1,"default")::keys,'{"a":"blurfl","x":43.2}');
?.*ERROR: column "default" does not exist.*
?.*
--返回结果类型校验：anyelement
select pg_typeof(json_populate_record(null::keys,'{"id":"0001","name":"wangerxiao"}'));
+-----------+
| pg_typeof |
+-----------+
| keys      |
+-----------+
--删除创建的复合类型
drop type keys cascade;
SQL SUCCESS
