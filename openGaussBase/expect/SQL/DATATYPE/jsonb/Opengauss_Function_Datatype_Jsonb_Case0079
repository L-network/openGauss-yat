-- @testpoint: 通用函数：jsonb_populate_recordset(对array-json中的每一个object-json执行上一个函数的功能，当入参不合理时，合理报错）
--jsonb_populate_recordset函数，入参合理
create type keys as(id int,name varchar);
SQL SUCCESS
select * from jsonb_populate_recordset(null::keys,'[{"id":"0001","name":"wangerxiao"},{"id":"0002","name":"xiaoma"}]',true);
+----+------------+
| id | name       |
+----+------------+
| 1  | wangerxiao |
| 2  | xiaoma     |
+----+------------+
select * from jsonb_populate_recordset(null::keys,'[{"id":"0001","name":"wangerxiao"}]');
+----+------------+
| id | name       |
+----+------------+
| 1  | wangerxiao |
+----+------------+
select * from jsonb_populate_recordset((3,null)::keys,'[{"idd":"0001","age":"18"},{"id":"0002","name":"xiaoma"}]',false);
+----+--------+
| id | name   |
+----+--------+
| 3  |        |
| 2  | xiaoma |
+----+--------+
select * from jsonb_populate_recordset((1,'name')::keys,'[{"a":"blurfl","x":43.2}]');
+----+------+
| id | name |
+----+------+
| 1  | name |
+----+------+
--jsonb_populate_recordset函数，入参不合理
select * from jsonb_populate_recordset(null::key,'[{"id":"0001","name":"wangerxiao"}]',true);
?.*ERROR: type "key" does not exist.*
?.*
select * from jsonb_populate_recordset(true::keys,'[{"id":"0001"},{"name":"wangerxiao","age":"18"}]',false);
?.*ERROR: cannot cast type boolean to key.*
?.*
select * from jsonb_populate_recordset(3::keys,'{"id":"zxc","age":"18"}',false);
?.*ERROR: cannot cast type integer to key.*
?.*
select * from jsonb_populate_recordset((1,1,null)::keys,'[{"a":"blurfl","x":43.2}]');
?.*ERROR: cannot cast type record to key.*
  Detail: Input has too many columns.
?.*
select * from jsonb_populate_recordset((1,"default")::keys,'{"a":"blurfl","x":43.2}');
?.*ERROR: column "default" does not exist.*
?.*
--返回结果类型校验：anyelement
select pg_typeof(jsonb_populate_recordset((1,'name')::keys,'[{"id":"0001","name":"wangerxiao"},{"id":"0002","name":"xiaoma"}]',true));
+-----------+
| pg_typeof |
+-----------+
| keys      |
| keys      |
+-----------+
--删除创建的复合类型
drop type keys cascade;
SQL SUCCESS
