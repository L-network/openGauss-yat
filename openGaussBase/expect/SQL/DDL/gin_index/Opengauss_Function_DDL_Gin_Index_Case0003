--  @testpoint: create gin index:创建gin索引后数据插，数据类型为tevevtor以及数组
-- column table
DROP TABLE IF EXISTS test_gin_2;
SQL SUCCESS
CREATE TABLE test_gin_2 (id INT, first_name text, last_name text) WITH (ORIENTATION = COLUMN);
SQL SUCCESS
--row table
DROP TABLE IF EXISTS test_gin_row1;
SQL SUCCESS
DROP TABLE IF EXISTS test_gin_row2;
SQL SUCCESS
CREATE TABLE test_gin_row1 (id INT, info INT[]);
SQL SUCCESS
CREATE TABLE test_gin_row2 (id INT, first_name text, last_name text);
SQL SUCCESS
--create gin index
--fail(COLUMN)
CREATE INDEX  test_gin_2_first_name_idx  ON test_gin_2 USING GIN(to_tsvector('english', first_name)) LOCAL;
?.*ERROR: non-partitioned table does not support local partitioned indexes.*
--successfully(COLUMN)
CREATE INDEX  test_gin_2_first_name_idx  ON test_gin_2 USING GIN(to_tsvector('english', first_name));
SQL SUCCESS
--fail(row)
CREATE INDEX  test_gin_row1_idx ON test_gin_row1 USING GIN(info) LOCAL;
?.*ERROR: non-partitioned table does not support local partitioned indexes.*
--successfully(row)
CREATE INDEX  test_gin_row1_idx ON test_gin_row1 USING GIN(info);
SQL SUCCESS
--successfully(row)
CREATE INDEX  test_gin_row2_first_name_idx  ON test_gin_row2 USING GIN(to_tsvector('english', first_name));
SQL SUCCESS
--insert data
INSERT INTO test_gin_2 SELECT id, md5(random()::text), md5(random()::text) FROM (SELECT * FROM generate_series(1,200000) AS id) AS x;
SQL SUCCESS
INSERT INTO test_gin_row1 SELECT g, ARRAY[1, g % 5, g] FROM generate_series(1, 200000) g;
SQL SUCCESS
INSERT INTO test_gin_row2 SELECT id, md5(random()::text), md5(random()::text) FROM (SELECT * FROM generate_series(1,200000) AS id) AS x;
SQL SUCCESS
--query
explain SELECT * FROM test_gin_2 WHERE to_tsvector('english', first_name) @@ to_tsquery('english', 'test') ORDER BY id, first_name, last_name;
+----------------------------------------------------------------------------------------------+
| QUERY PLAN                                                                                   |
+----------------------------------------------------------------------------------------------+
?.*| Row Adapter  .*
?.*|   ->  Vector Sort  .*
|         Sort Key: id, first_name, last_name                                                  |
?.*|         ->  CStore Scan on test_gin_2 .*
|               Filter: (to_tsvector('english'::regconfig, first_name) @@ '''test'''::tsquery) |
+----------------------------------------------------------------------------------------------+
explain SELECT * FROM test_gin_row1 WHERE info @> '{2}' AND info @> '{22}' ORDER BY id, info;
+-----------------------------------------------------------------------------------------+
| QUERY PLAN                                                                              |
+-----------------------------------------------------------------------------------------+
?.*| Sort  .*
|   Sort Key: id, info                                                                    |
?.*|   ->  Bitmap Heap Scan on test_gin_row1  .*
|         Recheck Cond: ((info @> '{2}'::integer[]) AND (info @> '{22}'::integer[]))      |
?.*|         ->  Bitmap Index Scan on test_gin_row1_idx  .*
|               Index Cond: ((info @> '{2}'::integer[]) AND (info @> '{22}'::integer[]))  |
+-----------------------------------------------------------------------------------------+
explain SELECT * FROM test_gin_row2 WHERE to_tsvector('english', first_name) @@ to_tsquery('english', 'test') ORDER BY id, first_name, last_name;
+-------------------------------------------------------------------------------------------------------+
| QUERY PLAN                                                                                            |
+-------------------------------------------------------------------------------------------------------+
?.*| Sort  .*
|   Sort Key: id, first_name, last_name                                                                 |
?.*|   ->  Bitmap Heap Scan on test_gin_row2  .*
|         Recheck Cond: (to_tsvector('english'::regconfig, first_name) @@ '''test'''::tsquery)          |
?.*|         ->  Bitmap Index Scan on test_gin_row2_first_name_idx  .*
|               Index Cond: (to_tsvector('english'::regconfig, first_name) @@ '''test'''::tsquery)      |
+-------------------------------------------------------------------------------------------------------+
--teaeDown drop table
DROP TABLE IF EXISTS test_gin_2;
SQL SUCCESS
DROP TABLE IF EXISTS test_gin_row1;
SQL SUCCESS
DROP TABLE IF EXISTS test_gin_row2;
SQL SUCCESS
