-- @testpoint: pg_get_triggerdef(oid, boolean) 描述：获取触发器的定义信息，入参为无效值时，合理报错
--创建源表和触发表
drop table if exists test_tb_trigger_001;
SQL SUCCESS
drop table if exists test_tb_trigger_002;
SQL SUCCESS
create table test_tb_trigger_001(id1 int, id2 int, id3 int);
SQL SUCCESS
create table test_tb_trigger_002(id1 int, id2 int, id3 int);
SQL SUCCESS
--创建触发器函数
create or replace function tri_truncate_func() returns trigger as
$$
declare
begin
	truncate test_tb_trigger_002;
	return old;
end
$$ language plpgsql;
/
SQL SUCCESS
--创建触发器
create trigger truncate_trigger before truncate on test_tb_trigger_001 execute procedure tri_truncate_func();
/
SQL SUCCESS
--获取触发器的定义信息
select pg_get_triggerdef(5566,true) from pg_trigger;
?.*ERROR: could not find tuple for trigger 5566.*
  Where: referenced column: pg_get_triggerdef
select pg_get_triggerdef('aaas',true) from pg_trigger;
?.*ERROR: invalid input syntax for type oid: "aaas".*
?.*Position.*
  Where: referenced column: pg_get_triggerdef
select pg_get_triggerdef(oid,5) from pg_trigger;
+---------------------------------------------------------------------------------------------------------------------------------+
| pg_get_triggerdef                                                                                                               |
+---------------------------------------------------------------------------------------------------------------------------------+
| CREATE TRIGGER truncate_trigger BEFORE TRUNCATE ON test_tb_trigger_001 FOR EACH STATEMENT EXECUTE PROCEDURE tri_truncate_func() |
+---------------------------------------------------------------------------------------------------------------------------------+
--清理环境
drop table test_tb_trigger_001;
SQL SUCCESS
drop table test_tb_trigger_002;
SQL SUCCESS
drop function tri_truncate_func();
SQL SUCCESS
