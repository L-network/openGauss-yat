-- @testpoint: BEFORE--TRUNCATE在表上不支持行级触发器，合理报错
--创建表
CREATE TABLE test_trigger_src_tbl0(id1 INT, id2 INT, id3 INT);
SQL SUCCESS
INSERT INTO test_trigger_src_tbl0 VALUES(100,200,300);
SQL SUCCESS
CREATE TABLE test_trigger_des_tbl0(id1 INT, id2 INT, id3 INT);
SQL SUCCESS
INSERT INTO test_trigger_des_tbl0 VALUES(1,2,3);
SQL SUCCESS
--创建触发器函数
CREATE OR REPLACE FUNCTION tri_truncate_func01() RETURNS TRIGGER AS
$$
DECLARE
BEGIN
	truncate table test_trigger_des_tbl0;
RETURN NEW;
END
$$ LANGUAGE PLPGSQL;
/
SQL SUCCESS
--创建触发器
CREATE TRIGGER truncate_trigger01 BEFORE truncate ON test_trigger_src_tbl0 FOR EACH ROW EXECUTE PROCEDURE tri_truncate_func01();
/
?.*ERROR: TRUNCATE FOR EACH ROW triggers are not supported
--执行触发事件
truncate table test_trigger_src_tbl0;
SQL SUCCESS
SELECT * FROM test_trigger_src_tbl0;
+-----+-----+-----+
| id1 | id2 | id3 |
+-----+-----+-----+
+-----+-----+-----+
--检查触发结果
SELECT * FROM test_trigger_des_tbl0;
+-----+-----+-----+
| id1 | id2 | id3 |
+-----+-----+-----+
| 1   | 2   | 3   |
+-----+-----+-----+
--DROP TRIGGER
DROP TRIGGER IF EXISTS truncate_trigger01 ON test_trigger_src_tbl0;
SQL SUCCESS
DROP FUNCTION tri_truncate_func01() cascade;
SQL SUCCESS
DROP TABLE test_trigger_src_tbl0;
SQL SUCCESS
DROP TABLE test_trigger_des_tbl0;
SQL SUCCESS
